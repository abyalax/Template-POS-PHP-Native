var d=Object.defineProperty;var u=(i,t,a)=>t in i?d(i,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[t]=a;var l=(i,t,a)=>u(i,typeof t!="symbol"?t+"":t,a);import{PaymentMethod as c}from"../types/payment.js";class g{constructor(){l(this,"_stateCart");this._stateCart={subtotal:0,tax:0,total:0,total_item:0,total_discount:0,payment_method:c.Cash,pay_return:0,pay_received:0,notes:"",items:[]},this.loadFromStorage()}fetchByName(t){return fetch("api/product/name",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`name=${encodeURIComponent(t)}`}).then(o=>o.json())}addItem(t){console.log("Adding item:",t);const a=this._stateCart.items.find(e=>e.id===t.id);a?a.quantity+=t.quantity??1:this._stateCart.items.push({...t,quantity:t.quantity||1}),this.calculateTotals(),this.save()}removeItem(t){this._stateCart.items=this._stateCart.items.filter(a=>a.id!==t),this.calculateTotals(),this.save()}updateQuantity(t,a){console.log("Updating item with:","productId: ",t,"newQuantity: ",a);const e=this._stateCart.items.find(o=>o.id===t);console.log("Updating quantity for item:",e),e&&(e.quantity=a,this.calculateTotals(),this.save(),console.log("Cart after update:",this._stateCart))}calculateTotals(){console.log("Calculating totals...");const t=this._stateCart,a=t.items;let e=0,o=0,n=0,r=0;for(const s of a){const m=s.price*s.quantity,h=s.price*(s.discount||0)*s.quantity,_=(s.tax_rate||0)*s.price*s.quantity;e+=m,o+=h,n+=_,r+=s.quantity}t.subtotal=e,t.total_discount=o,t.tax=n,t.total=e-o+n,t.total_item=r,console.log("Cart calculated:",{subtotal:e,total_discount:o,tax:n,total:t.total,total_item:r})}save(){console.log("Save To Storage..."),localStorage.setItem("pos_cart",JSON.stringify(this._stateCart))}loadFromStorage(){console.log("Load from storage...");const t=localStorage.getItem("pos_cart");t&&(this._stateCart=JSON.parse(t),console.log("stateCart : ",this._stateCart))}isEmptyCart(){return this._stateCart.items.length===0}clearCart(){this._stateCart={items:[],subtotal:0,tax:0,total:0,total_item:0,total_discount:0,payment_method:c.Cash,pay_return:0,pay_received:0,notes:""},this.save(),console.log("Cart cleared...")}getCart(){return this._stateCart}setPaymentMethod(t){this._stateCart.payment_method=t}setPayReceived(t){this._stateCart.pay_received=t}setPayChange(t){this._stateCart.pay_return=t}setNotes(t){this._stateCart.notes=t}}export{g as default};
